#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('AQS:server');
const http = require('http');

const port = normalizePort(process.env.PORT || 1337);
const host = 'localhost';
const env = app.get('env');

const server = http.createServer(app);
const io = require('socket.io').listen(server);

server.listen(port, host, () => {
  console.log(`${env.charAt(0).toUpperCase() + env.substring(1)} app listening at http://${server.address().address}:${server.address().port}`);
});
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', (socket) => {
  console.log('Connected successfully to the socket...');

  socket.on('join', function(data) {
    console.log(data);
  });
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges.');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use.');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
